<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/cba/datamigration/model/SAModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/cba/datamigration/model/SAModel.java" />
              <option name="originalContent" value="package com.cba.datamigration.model;&#10;&#10;import com.cba.datamigration.dto.ServiceAgreementDTO;&#10;import com.cba.datamigration.util.DBConnection;&#10;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.SQLException;&#10;import java.sql.Timestamp;&#10;import java.time.LocalDateTime;&#10;import java.util.*;&#10;&#10;public class SAModel {&#10;    private final Map&lt;String, String&gt; saTypeMap = new HashMap&lt;&gt;();&#10;&#10;    public void saveWarrantyTemplate(List&lt;ServiceAgreementDTO&gt; serviceAgreementDTOS) throws SQLException {&#10;        if (serviceAgreementDTOS == null || serviceAgreementDTOS.isEmpty()) {&#10;            System.out.println(&quot;No service agreements to process&quot;);&#10;            return;&#10;        }&#10;&#10;        final int BATCH_SIZE = 1000;&#10;        Connection conn = null;&#10;&#10;        try {&#10;            conn = DBConnection.getInstance().getConnection();&#10;            conn.setAutoCommit(false);&#10;&#10;            // Store unique combinations of period and service count&#10;            Map&lt;String, Map.Entry&lt;Integer, Integer&gt;&gt; uniqueCombinations = new HashMap&lt;&gt;();&#10;&#10;            for (ServiceAgreementDTO sa : serviceAgreementDTOS) {&#10;                int period = 0;&#10;&#10;                if (!sa.getPeriod().equalsIgnoreCase(&quot;null&quot;) &amp;&amp; !sa.getPeriod().trim().isEmpty()) {&#10;                    try {&#10;                        period = (int) Double.parseDouble(sa.getPeriod().trim());&#10;                    } catch (NumberFormatException e) {&#10;                        System.out.println(&quot;Invalid period: &quot; + sa.getPeriod());&#10;                        continue;&#10;                    }&#10;                } else if (!sa.getWarrantyPeriod().equalsIgnoreCase(&quot;null&quot;) &amp;&amp; !sa.getWarrantyPeriod().trim().isEmpty()) {&#10;                    try {&#10;                        period = (int) Double.parseDouble(sa.getWarrantyPeriod().trim());&#10;                    } catch (NumberFormatException e) {&#10;                        System.out.println(&quot;Invalid warranty period: &quot; + sa.getWarrantyPeriod());&#10;                        continue;&#10;                    }&#10;                }&#10;&#10;                // Skip warranties &lt; 3 months&#10;                if (period &lt; 3) {&#10;                    continue;&#10;                }&#10;&#10;                int services = 0;&#10;                try {&#10;                    services = (int) Double.parseDouble(sa.getServiceCount());&#10;                    if (services &gt; 20) {&#10;                        services = 0;&#10;                    }&#10;                } catch (NumberFormatException e) {&#10;                    System.out.println(&quot;Invalid service count: &quot; + sa.getServiceCount());&#10;                    continue;&#10;                }&#10;&#10;                // Normalize warranty periods&#10;                period = normalizeWarrantyPeriod(period);&#10;&#10;                // Map SA to LABOUR_ONLY and WA to WARRANTY&#10;                String mappedSaType = sa.getSaType().equals(&quot;SA&quot;) ? &quot;LABOUR_ONLY&quot; :&#10;                        sa.getSaType().equals(&quot;WA&quot;) ? &quot;WARRANTY&quot; : sa.getSaType();&#10;&#10;                // Create unique key for this combination using mapped type&#10;                String key = period + &quot;-&quot; + services + &quot;-&quot; + mappedSaType;&#10;                uniqueCombinations.putIfAbsent(key, Map.entry(period, services));&#10;                saTypeMap.put(key, mappedSaType);&#10;            }&#10;&#10;            // Check existing combinations in database&#10;            Set&lt;String&gt; existingCombinations = getExistingCombinations(conn);&#10;&#10;            // Insert new combinations&#10;            String insertSql = &quot;INSERT INTO service_agreement_template &quot; +&#10;                    &quot;(duration_months, service_count, sr_category_id, service_agreement_type, name, is_default, &quot; +&#10;                    &quot;inserted_at, created_at, created_by, saved_at, updated_at, updated_by, is_deleted, is_active) &quot; +&#10;                    &quot;VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;            try (PreparedStatement ps = conn.prepareStatement(insertSql)) {&#10;                int count = 0;&#10;                for (Map.Entry&lt;String, Map.Entry&lt;Integer, Integer&gt;&gt; entry : uniqueCombinations.entrySet()) {&#10;                    if (existingCombinations.contains(entry.getKey())) {&#10;                        //System.out.println(&quot;Skipping existing combination: &quot; + entry.getKey());&#10;                        continue;&#10;                    }&#10;&#10;                    int period = entry.getValue().getKey();&#10;                    int services = entry.getValue().getValue();&#10;                    String saType = saTypeMap.get(entry.getKey());&#10;&#10;                    ps.setInt(1, period);&#10;                    ps.setInt(2, services);&#10;                    ps.setLong(3, 1);  // sr_category_id&#10;                    ps.setString(4, saType);  // Use mapped type (LABOUR_ONLY or WARRANTY)&#10;                    ps.setString(5, String.format(&quot;%s (%d months) - %d service&quot;, saType, period, services));&#10;                    ps.setBoolean(6, true);  // is_default&#10;&#10;                    Timestamp now = Timestamp.valueOf(LocalDateTime.now());&#10;                    ps.setTimestamp(7, now);  // inserted_at&#10;                    ps.setTimestamp(8, now);  // created_at&#10;                    ps.setString(9, &quot;Migration System&quot;);  // created_by&#10;                    ps.setTimestamp(10, now); // saved_at&#10;                    ps.setTimestamp(11, now); // updated_at&#10;                    ps.setString(12, &quot;Migration System&quot;); // updated_by&#10;                    ps.setBoolean(13, false); // is_deleted&#10;                    ps.setBoolean(14, true);  // is_active&#10;&#10;                    ps.addBatch();&#10;                    count++;&#10;&#10;                    if (count % BATCH_SIZE == 0) {&#10;                        ps.executeBatch();&#10;                    }&#10;                }&#10;&#10;                if (count % BATCH_SIZE != 0) {&#10;                    ps.executeBatch();&#10;                }&#10;            }&#10;&#10;            conn.commit();&#10;            //System.out.println(&quot;Successfully processed &quot; + uniqueCombinations.size() + &quot; service agreement templates&quot;);&#10;&#10;        } catch (SQLException e) {&#10;            if (conn != null) {&#10;                try {&#10;                    conn.rollback();&#10;                } catch (SQLException ex) {&#10;                    System.err.println(&quot;Error during rollback: &quot; + ex.getMessage());&#10;                }&#10;            }&#10;            //System.err.println(&quot;Failed to save service agreement templates: &quot; + e.getMessage());&#10;            throw new SQLException(&quot;Error saving service agreement data&quot;, e);&#10;        } finally {&#10;            if (conn != null) {&#10;                try {&#10;                    conn.setAutoCommit(true);&#10;                } catch (SQLException e) {&#10;                    System.err.println(&quot;Error resetting auto-commit: &quot; + e.getMessage());&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private int normalizeWarrantyPeriod(int period) {&#10;        if (period &gt;= 3 &amp;&amp; period &lt; 6) return 3;&#10;        else if (period &gt;= 6 &amp;&amp; period &lt; 12) return 6;&#10;        else if (period &gt;= 12 &amp;&amp; period &lt; 24) return 12;&#10;        else if (period &gt;= 24 &amp;&amp; period &lt; 36) return 24;&#10;        else if (period &gt;= 36 &amp;&amp; period &lt; 48) return 36;&#10;        else if (period &gt;= 48 &amp;&amp; period &lt; 60) return 48;&#10;        else if (period &gt;= 60) return 60;&#10;        return period;&#10;    }&#10;&#10;    private Set&lt;String&gt; getExistingCombinations(Connection conn) throws SQLException {&#10;        Set&lt;String&gt; existingCombinations = new HashSet&lt;&gt;();&#10;        String checkExistingSql = &quot;SELECT duration_months, service_count, service_agreement_type FROM service_agreement_template&quot;;&#10;&#10;        try (PreparedStatement ps = conn.prepareStatement(checkExistingSql)) {&#10;            var rs = ps.executeQuery();&#10;            while (rs.next()) {&#10;                String combination = rs.getInt(&quot;duration_months&quot;) + &quot;-&quot; +&#10;                        rs.getInt(&quot;service_count&quot;) + &quot;-&quot; +&#10;                        rs.getString(&quot;service_agreement_type&quot;);&#10;                existingCombinations.add(combination);&#10;            }&#10;        }&#10;        return existingCombinations;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.cba.datamigration.model;&#10;&#10;import com.cba.datamigration.dto.ServiceAgreementDTO;&#10;import com.cba.datamigration.util.DBConnection;&#10;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.SQLException;&#10;import java.sql.Timestamp;&#10;import java.time.LocalDateTime;&#10;import java.util.*;&#10;&#10;public class SAModel {&#10;    private final Map&lt;String, String&gt; saTypeMap = new HashMap&lt;&gt;();&#10;&#10;    public void saveWarrantyTemplate(List&lt;ServiceAgreementDTO&gt; serviceAgreementDTOS) throws SQLException {&#10;        if (serviceAgreementDTOS == null || serviceAgreementDTOS.isEmpty()) {&#10;            System.out.println(&quot;No service agreements to process&quot;);&#10;            return;&#10;        }&#10;&#10;        final int BATCH_SIZE = 1000;&#10;        Connection conn = null;&#10;&#10;        try {&#10;            conn = DBConnection.getInstance().getConnection();&#10;            conn.setAutoCommit(false);&#10;&#10;            // Store unique combinations of period and service count&#10;            Map&lt;String, Map.Entry&lt;Integer, Integer&gt;&gt; uniqueCombinations = new HashMap&lt;&gt;();&#10;&#10;            for (ServiceAgreementDTO sa : serviceAgreementDTOS) {&#10;                int period = 0;&#10;&#10;                if (!sa.getPeriod().equalsIgnoreCase(&quot;null&quot;) &amp;&amp; !sa.getPeriod().trim().isEmpty()) {&#10;                    try {&#10;                        period = (int) Double.parseDouble(sa.getPeriod().trim());&#10;                    } catch (NumberFormatException e) {&#10;                        System.out.println(&quot;Invalid period: &quot; + sa.getPeriod());&#10;                        continue;&#10;                    }&#10;                } else if (!sa.getWarrantyPeriod().equalsIgnoreCase(&quot;null&quot;) &amp;&amp; !sa.getWarrantyPeriod().trim().isEmpty()) {&#10;                    try {&#10;                        period = (int) Double.parseDouble(sa.getWarrantyPeriod().trim());&#10;                    } catch (NumberFormatException e) {&#10;                        System.out.println(&quot;Invalid warranty period: &quot; + sa.getWarrantyPeriod());&#10;                        continue;&#10;                    }&#10;                }&#10;&#10;                // Skip warranties &lt; 3 months&#10;                if (period &lt; 3) {&#10;                    continue;&#10;                }&#10;&#10;                int services = 0;&#10;                try {&#10;                    services = (int) Double.parseDouble(sa.getServiceCount());&#10;                    if (services &gt; 20) {&#10;                        services = 0;&#10;                    }&#10;                } catch (NumberFormatException e) {&#10;                    System.out.println(&quot;Invalid service count: &quot; + sa.getServiceCount());&#10;                    continue;&#10;                }&#10;&#10;                // Normalize warranty periods&#10;                period = normalizeWarrantyPeriod(period);&#10;&#10;                // Map SA to LABOUR_ONLY and WA to WARRANTY&#10;                String mappedSaType = sa.getSaType().equals(&quot;SA&quot;) ? &quot;LABOUR_ONLY&quot; :&#10;                        sa.getSaType().equals(&quot;WA&quot;) ? &quot;WARRANTY&quot; : sa.getSaType();&#10;&#10;                // Create unique key for this combination using mapped type&#10;                String key = period + &quot;-&quot; + services + &quot;-&quot; + mappedSaType;&#10;                uniqueCombinations.putIfAbsent(key, Map.entry(period, services));&#10;                saTypeMap.put(key, mappedSaType);&#10;            }&#10;&#10;            // Check existing combinations in database&#10;            Set&lt;String&gt; existingCombinations = getExistingCombinations(conn);&#10;&#10;            // Insert new combinations&#10;            String insertSql = &quot;INSERT INTO service_agreement_template &quot; +&#10;                    &quot;(duration_months, service_count, sr_category_id, service_agreement_type, name, is_default, &quot; +&#10;                    &quot;inserted_at, created_at, created_by, saved_at, updated_at, updated_by, is_deleted, is_active) &quot; +&#10;                    &quot;VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;            try (PreparedStatement ps = conn.prepareStatement(insertSql)) {&#10;                int count = 0;&#10;                for (Map.Entry&lt;String, Map.Entry&lt;Integer, Integer&gt;&gt; entry : uniqueCombinations.entrySet()) {&#10;                    if (existingCombinations.contains(entry.getKey())) {&#10;                        continue;&#10;                    }&#10;&#10;                    int period = entry.getValue().getKey();&#10;                    int services = entry.getValue().getValue();&#10;                    String saType = saTypeMap.get(entry.getKey());&#10;&#10;                    ps.setInt(1, period);&#10;                    ps.setInt(2, services);&#10;                    ps.setLong(3, 1);  // sr_category_id&#10;                    ps.setString(4, saType);  // Use mapped type (LABOUR_ONLY or WARRANTY)&#10;                    ps.setString(5, String.format(&quot;%s (%d months) - %d service&quot;, saType, period, services));&#10;                    ps.setBoolean(6, true);  // is_default&#10;&#10;                    Timestamp now = Timestamp.valueOf(LocalDateTime.now());&#10;                    ps.setTimestamp(7, now);  // inserted_at&#10;                    ps.setTimestamp(8, now);  // created_at&#10;                    ps.setString(9, &quot;Migration System&quot;);  // created_by&#10;                    ps.setTimestamp(10, now); // saved_at&#10;                    ps.setTimestamp(11, now); // updated_at&#10;                    ps.setString(12, &quot;Migration System&quot;); // updated_by&#10;                    ps.setBoolean(13, false); // is_deleted&#10;                    ps.setBoolean(14, true);  // is_active&#10;&#10;                    ps.addBatch();&#10;                    count++;&#10;&#10;                    if (count % BATCH_SIZE == 0) {&#10;                        ps.executeBatch();&#10;                    }&#10;                }&#10;&#10;                if (count % BATCH_SIZE != 0) {&#10;                    ps.executeBatch();&#10;                }&#10;            }&#10;&#10;            conn.commit();&#10;&#10;        } catch (SQLException e) {&#10;            if (conn != null) {&#10;                try {&#10;                    conn.rollback();&#10;                } catch (SQLException ex) {&#10;                    System.err.println(&quot;Error during rollback: &quot; + ex.getMessage());&#10;                }&#10;            }&#10;            throw new SQLException(&quot;Error saving service agreement data&quot;, e);&#10;        } finally {&#10;            if (conn != null) {&#10;                try {&#10;                    conn.setAutoCommit(true);&#10;                } catch (SQLException e) {&#10;                    System.err.println(&quot;Error resetting auto-commit: &quot; + e.getMessage());&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private int normalizeWarrantyPeriod(int period) {&#10;        if (period &gt;= 3 &amp;&amp; period &lt; 6) return 3;&#10;        else if (period &gt;= 6 &amp;&amp; period &lt; 12) return 6;&#10;        else if (period &gt;= 12 &amp;&amp; period &lt; 24) return 12;&#10;        else if (period &gt;= 24 &amp;&amp; period &lt; 36) return 24;&#10;        else if (period &gt;= 36 &amp;&amp; period &lt; 48) return 36;&#10;        else if (period &gt;= 48 &amp;&amp; period &lt; 60) return 48;&#10;        else if (period &gt;= 60) return 60;&#10;        return period;&#10;    }&#10;&#10;    private Set&lt;String&gt; getExistingCombinations(Connection conn) throws SQLException {&#10;        Set&lt;String&gt; existingCombinations = new HashSet&lt;&gt;();&#10;        String checkExistingSql = &quot;SELECT duration_months, service_count, service_agreement_type FROM service_agreement_template&quot;;&#10;&#10;        try (PreparedStatement ps = conn.prepareStatement(checkExistingSql)) {&#10;            var rs = ps.executeQuery();&#10;            while (rs.next()) {&#10;                String combination = rs.getInt(&quot;duration_months&quot;) + &quot;-&quot; +&#10;                        rs.getInt(&quot;service_count&quot;) + &quot;-&quot; +&#10;                        rs.getString(&quot;service_agreement_type&quot;);&#10;                existingCombinations.add(combination);&#10;            }&#10;        }&#10;        return existingCombinations;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/cba/datamigration/util/DBConnection.java.example">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/cba/datamigration/util/DBConnection.java.example" />
              <option name="updatedContent" value="package com.cba.datamigration.util;&#10;&#10;import java.sql.Connection;&#10;import java.sql.DriverManager;&#10;import java.sql.SQLException;&#10;&#10;public class DBConnection {&#10;    private static DBConnection dbConnection;&#10;    private Connection connection;&#10;&#10;    private DBConnection() {&#10;        try {&#10;            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;            connection = DriverManager.getConnection(&#10;                    &quot;jdbc:mysql://localhost:3306/your_database_name&quot;,&#10;                    &quot;your_username&quot;,&#10;                    &quot;your_password&quot;&#10;            );&#10;        } catch (ClassNotFoundException | SQLException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public static DBConnection getInstance() {&#10;        if (dbConnection == null) {&#10;            dbConnection = new DBConnection();&#10;        }&#10;        return dbConnection;&#10;    }&#10;&#10;    public Connection getConnection() {&#10;        return connection;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>